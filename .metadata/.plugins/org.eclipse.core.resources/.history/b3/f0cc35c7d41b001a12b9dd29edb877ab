package com.glaway.ids.functionManage.config;

import org.apache.commons.dbcp.BasicDataSource;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.mapper.MapperFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
 
import com.glaway.ids.functionManage.dao.TestMapper;
 
@Configuration
@ComponentScan("com.yan.otl")
@PropertySource("classpath:/com/glaway/otl/ids/functionManage/properties/jdbc.properties")
@EnableTransactionManagement
public class RootConfig {
	@Autowired
	Environment env;
	
	@Value("${jdbc.driverClassName}")
	private String driverClassName;
	
	@Value("${jdbc.url}")
	private String url;
	
	@Value("${jdbc.username}")
	private String username;
	
	@Value("${jdbc.password}")
    private String password;
	
	/**
	 * 数据源
	 * @return
	 */
	@Bean
	public BasicDataSource dataSource() {
		BasicDataSource ds = new BasicDataSource();
		ds.setDriverClassName(driverClassName);
		ds.setUrl(url);
		ds.setUsername(username);
		ds.setPassword(password);
		
		System.out.println(env.getProperty("jdbc.username"));
		System.out.println(password);
		
		ds.setInitialSize(5);
		ds.setMaxIdle(10);
		ds.setMinIdle(5);
		ds.setMaxTotal(15);
		return ds;
	}
	
	@Bean
	DataSourceTransactionManager DataSourceTransactionManager(BasicDataSource dataSource) {
		DataSourceTransactionManager dstm = new DataSourceTransactionManager();
		dstm.setDataSource(dataSource);
		
		return dstm;
	}
	
	@Bean
	JdbcTemplate jdbcTemplate (BasicDataSource dataSource) {
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
		
		return jdbcTemplate;
	}
	
	/**
	 * SqlSessionFactoryBean配置
	 * @param dataSource
	 * @return
	 */
	@Bean
	SqlSessionFactoryBean sqlSessionFactoryBean(BasicDataSource dataSource) {
 
		SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
		
		sqlSessionFactoryBean.setDataSource(dataSource);
		
		org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration() ;
		
		sqlSessionFactoryBean.setConfiguration(configuration);
		
		return sqlSessionFactoryBean;
	}
	
	@Bean
	MapperFactoryBean<UserMapper> mapperFactoryBean(SqlSessionFactoryBean sqlSessionFactoryBean) throws Exception {
		MapperFactoryBean<UserMapper> mapperFactoryBean = new MapperFactoryBean<UserMapper>();
		
		mapperFactoryBean.setSqlSessionFactory(sqlSessionFactoryBean.getObject());
		mapperFactoryBean.setMapperInterface(UserMapper.class);
		
		return mapperFactoryBean;
	}
}
